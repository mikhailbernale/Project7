'------------------------------------------------------------------------------
'  <auto-generated>
'      Этот код был создан построителем кодированных тестов ИП.
'      Версия: 16.0.0.0
'
'      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
'      утрачены при повторном формировании кода.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace CodedUITestProject3
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''RecordedMethod1 - Используйте "RecordedMethod1Params" для передачи параметров в этот метод.
        '''</summary>
        Public Sub RecordedMethod1()
            Dim uIВвестиWindow As WinWindow = Me.UIТестированиеПОWindow.UIТестированиеПОClient.UIВвестиWindow
            Dim uIПосчитатьWindow As WinWindow = Me.UIТестированиеПОWindow.UIТестированиеПОClient.UIПосчитатьWindow
            Dim uIОКButton As WinButton = Me.UIОКWindow.UIОКButton

            'Запуск "%USERPROFILE%\source\repos\Project7\Debug\Project7.exe"
            Dim uIТестированиеПОWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.RecordedMethod1Params.UIТестированиеПОWindowExePath, Me.RecordedMethod1Params.UIТестированиеПОWindowAlternateExePath)

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Двойной щелчок "Ввести" окно
            Mouse.DoubleClick(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Ввести" окно
            Mouse.Click(uIВвестиWindow, New Point(90, 65))

            'Щелкните "Посчитать" окно
            Mouse.Click(uIПосчитатьWindow, New Point(115, 67))

            'Щелкните "ОК" кнопка
            Mouse.Click(uIОКButton, New Point(74, 17))
        End Sub
        
        '''<summary>
        '''RecordedMethod2 - Используйте "RecordedMethod2Params" для передачи параметров в этот метод.
        '''</summary>
        Public Sub RecordedMethod2()
            Dim uIProject7exeярлыкListItem As WinListItem = Me.UIProgramManagerWindow.UIРабочийстолList.UIProject7exeярлыкListItem
            Dim uIОткрытьMenuItem As WinMenuItem = Me.UIItemWindow.UIКонтекстMenu.UIОткрытьMenuItem
            Dim uIВвестиButton As WinButton = Me.UIТестированиеПОWindow.UIВвестиWindow.UIВвестиButton
            Dim uINumericUpDown1ComboBox As WinComboBox = Me.UIТестированиеПОWindow.UINumericUpDown1Window.UINumericUpDown1ComboBox
            Dim uIПосчитатьButton As WinButton = Me.UIТестированиеПОWindow.UIПосчитатьWindow.UIПосчитатьButton
            Dim uIОКButton As WinButton = Me.UIОКWindow.UIОКButton

            'Щелкните "Project7.exe — ярлык" элемент списка
            Mouse.Click(uIProject7exeярлыкListItem, New Point(46, 41))

            'Правая-Щелкните "Project7.exe — ярлык" элемент списка
            Mouse.Click(uIProject7exeярлыкListItem, MouseButtons.Right, ModifierKeys.None, New Point(46, 41))

            'Щелкните "Открыть" элемент меню
            Mouse.Click(uIОткрытьMenuItem, New Point(16, 8))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(17, 6))

            'Выберите "76" в "numericUpDown1" поле со списком
            uINumericUpDown1ComboBox.EditableItem = Me.RecordedMethod2Params.UINumericUpDown1ComboBoxEditableItem

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Ввести" кнопка
            Mouse.Click(uIВвестиButton, New Point(14, 7))

            'Щелкните "Посчитать" кнопка
            Mouse.Click(uIПосчитатьButton, New Point(11, 8))

            'Щелкните "ОК" кнопка
            Mouse.Click(uIОКButton, New Point(13, 10))
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property RecordedMethod1Params() As RecordedMethod1Params
            Get
                If (Me.mRecordedMethod1Params Is Nothing) Then
                    Me.mRecordedMethod1Params = New RecordedMethod1Params()
                End If
                Return Me.mRecordedMethod1Params
            End Get
        End Property
        
        Public Overridable ReadOnly Property RecordedMethod2Params() As RecordedMethod2Params
            Get
                If (Me.mRecordedMethod2Params Is Nothing) Then
                    Me.mRecordedMethod2Params = New RecordedMethod2Params()
                End If
                Return Me.mRecordedMethod2Params
            End Get
        End Property
        
        Public ReadOnly Property UIТестированиеПОWindow() As UIТестированиеПОWindow
            Get
                If (Me.mUIТестированиеПОWindow Is Nothing) Then
                    Me.mUIТестированиеПОWindow = New UIТестированиеПОWindow()
                End If
                Return Me.mUIТестированиеПОWindow
            End Get
        End Property
        
        Public ReadOnly Property UIОКWindow() As UIОКWindow
            Get
                If (Me.mUIОКWindow Is Nothing) Then
                    Me.mUIОКWindow = New UIОКWindow()
                End If
                Return Me.mUIОКWindow
            End Get
        End Property
        
        Public ReadOnly Property UIProgramManagerWindow() As UIProgramManagerWindow
            Get
                If (Me.mUIProgramManagerWindow Is Nothing) Then
                    Me.mUIProgramManagerWindow = New UIProgramManagerWindow()
                End If
                Return Me.mUIProgramManagerWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItemWindow() As UIItemWindow
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow()
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mRecordedMethod1Params As RecordedMethod1Params
        
        Private mRecordedMethod2Params As RecordedMethod2Params
        
        Private mUIТестированиеПОWindow As UIТестированиеПОWindow
        
        Private mUIОКWindow As UIОКWindow
        
        Private mUIProgramManagerWindow As UIProgramManagerWindow
        
        Private mUIItemWindow As UIItemWindow
        #End Region
    End Class
    
    '''<summary>
    '''Параметры для передачи в "RecordedMethod1"
    '''</summary>
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class RecordedMethod1Params
        
        #Region "Fields"
        '''<summary>
        '''Запуск "%USERPROFILE%\source\repos\Project7\Debug\Project7.exe"
        '''</summary>
        Public UIТестированиеПОWindowExePath As String = "C:\Users\mihan\source\repos\Project7\Debug\Project7.exe"
        
        '''<summary>
        '''Запуск "%USERPROFILE%\source\repos\Project7\Debug\Project7.exe"
        '''</summary>
        Public UIТестированиеПОWindowAlternateExePath As String = "%USERPROFILE%\source\repos\Project7\Debug\Project7.exe"
        #End Region
    End Class
    
    '''<summary>
    '''Параметры для передачи в "RecordedMethod2"
    '''</summary>
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class RecordedMethod2Params
        
        #Region "Fields"
        '''<summary>
        '''Выберите "76" в "numericUpDown1" поле со списком
        '''</summary>
        Public UINumericUpDown1ComboBoxEditableItem As String = "76"
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIТестированиеПОWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Тестирование ПО"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Тестирование ПО")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIТестированиеПОClient() As UIТестированиеПОClient
            Get
                If (Me.mUIТестированиеПОClient Is Nothing) Then
                    Me.mUIТестированиеПОClient = New UIТестированиеПОClient(Me)
                End If
                Return Me.mUIТестированиеПОClient
            End Get
        End Property
        
        Public ReadOnly Property UIВвестиWindow() As UIВвестиWindow
            Get
                If (Me.mUIВвестиWindow Is Nothing) Then
                    Me.mUIВвестиWindow = New UIВвестиWindow(Me)
                End If
                Return Me.mUIВвестиWindow
            End Get
        End Property
        
        Public ReadOnly Property UINumericUpDown1Window() As UINumericUpDown1Window
            Get
                If (Me.mUINumericUpDown1Window Is Nothing) Then
                    Me.mUINumericUpDown1Window = New UINumericUpDown1Window(Me)
                End If
                Return Me.mUINumericUpDown1Window
            End Get
        End Property
        
        Public ReadOnly Property UIПосчитатьWindow() As UIПосчитатьWindow
            Get
                If (Me.mUIПосчитатьWindow Is Nothing) Then
                    Me.mUIПосчитатьWindow = New UIПосчитатьWindow(Me)
                End If
                Return Me.mUIПосчитатьWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIТестированиеПОClient As UIТестированиеПОClient
        
        Private mUIВвестиWindow As UIВвестиWindow
        
        Private mUINumericUpDown1Window As UINumericUpDown1Window
        
        Private mUIПосчитатьWindow As UIПосчитатьWindow
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIТестированиеПОClient
        Inherits WinClient
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinControl.PropertyNames.Name) = "Тестирование ПО"
            Me.WindowTitles.Add("Тестирование ПО")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIВвестиWindow() As WinWindow
            Get
                If (Me.mUIВвестиWindow Is Nothing) Then
                    Me.mUIВвестиWindow = New WinWindow(Me)
                    Me.mUIВвестиWindow.SearchProperties(WinWindow.PropertyNames.Name) = "Ввести"
                    Me.mUIВвестиWindow.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains))
                    Me.mUIВвестиWindow.WindowTitles.Add("Тестирование ПО")
                End If
                Return Me.mUIВвестиWindow
            End Get
        End Property
        
        Public ReadOnly Property UIПосчитатьWindow() As WinWindow
            Get
                If (Me.mUIПосчитатьWindow Is Nothing) Then
                    Me.mUIПосчитатьWindow = New WinWindow(Me)
                    Me.mUIПосчитатьWindow.SearchProperties(WinWindow.PropertyNames.Name) = "Посчитать"
                    Me.mUIПосчитатьWindow.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains))
                    Me.mUIПосчитатьWindow.WindowTitles.Add("Тестирование ПО")
                End If
                Return Me.mUIПосчитатьWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIВвестиWindow As WinWindow
        
        Private mUIПосчитатьWindow As WinWindow
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIВвестиWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "button2"
            Me.WindowTitles.Add("Тестирование ПО")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIВвестиButton() As WinButton
            Get
                If (Me.mUIВвестиButton Is Nothing) Then
                    Me.mUIВвестиButton = New WinButton(Me)
                    Me.mUIВвестиButton.SearchProperties(WinButton.PropertyNames.Name) = "Ввести"
                    Me.mUIВвестиButton.WindowTitles.Add("Тестирование ПО")
                End If
                Return Me.mUIВвестиButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIВвестиButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UINumericUpDown1Window
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "numericUpDown1"
            Me.WindowTitles.Add("Тестирование ПО")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINumericUpDown1ComboBox() As WinComboBox
            Get
                If (Me.mUINumericUpDown1ComboBox Is Nothing) Then
                    Me.mUINumericUpDown1ComboBox = New WinComboBox(Me)
                    Me.mUINumericUpDown1ComboBox.WindowTitles.Add("Тестирование ПО")
                End If
                Return Me.mUINumericUpDown1ComboBox
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINumericUpDown1ComboBox As WinComboBox
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIПосчитатьWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "button1"
            Me.WindowTitles.Add("Тестирование ПО")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIПосчитатьButton() As WinButton
            Get
                If (Me.mUIПосчитатьButton Is Nothing) Then
                    Me.mUIПосчитатьButton = New WinButton(Me)
                    Me.mUIПосчитатьButton.SearchProperties(WinButton.PropertyNames.Name) = "Посчитать"
                    Me.mUIПосчитатьButton.WindowTitles.Add("Тестирование ПО")
                End If
                Return Me.mUIПосчитатьButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIПосчитатьButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIОКWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "ОК"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Button"
            Me.WindowTitles.Add("ОК")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIОКButton() As WinButton
            Get
                If (Me.mUIОКButton Is Nothing) Then
                    Me.mUIОКButton = New WinButton(Me)
                    Me.mUIОКButton.SearchProperties(WinButton.PropertyNames.Name) = "ОК"
                    Me.mUIОКButton.WindowTitles.Add("ОК")
                End If
                Return Me.mUIОКButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIОКButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIProgramManagerWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Program Manager"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Progman"
            Me.WindowTitles.Add("Program Manager")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIРабочийстолList() As UIРабочийстолList
            Get
                If (Me.mUIРабочийстолList Is Nothing) Then
                    Me.mUIРабочийстолList = New UIРабочийстолList(Me)
                End If
                Return Me.mUIРабочийстолList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIРабочийстолList As UIРабочийстолList
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIРабочийстолList
        Inherits WinList
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinList.PropertyNames.Name) = "Рабочий стол"
            Me.WindowTitles.Add("Program Manager")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIProject7exeярлыкListItem() As WinListItem
            Get
                If (Me.mUIProject7exeярлыкListItem Is Nothing) Then
                    Me.mUIProject7exeярлыкListItem = New WinListItem(Me)
                    Me.mUIProject7exeярлыкListItem.SearchProperties(WinListItem.PropertyNames.Name) = "Project7.exe — ярлык"
                    Me.mUIProject7exeярлыкListItem.WindowTitles.Add("Program Manager")
                End If
                Return Me.mUIProject7exeярлыкListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIProject7exeярлыкListItem As WinListItem
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIItemWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.AccessibleName) = "Контекст"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32768"
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIКонтекстMenu() As UIКонтекстMenu
            Get
                If (Me.mUIКонтекстMenu Is Nothing) Then
                    Me.mUIКонтекстMenu = New UIКонтекстMenu(Me)
                End If
                Return Me.mUIКонтекстMenu
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIКонтекстMenu As UIКонтекстMenu
        #End Region
    End Class
    
    <GeneratedCode("Построитель кодированных тестов ИП", "16.0.29514.35")>  _
    Public Class UIКонтекстMenu
        Inherits WinMenu
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenu.PropertyNames.Name) = "Контекст"
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIОткрытьMenuItem() As WinMenuItem
            Get
                If (Me.mUIОткрытьMenuItem Is Nothing) Then
                    Me.mUIОткрытьMenuItem = New WinMenuItem(Me)
                    Me.mUIОткрытьMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Открыть"
                End If
                Return Me.mUIОткрытьMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIОткрытьMenuItem As WinMenuItem
        #End Region
    End Class
End Namespace
